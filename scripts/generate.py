#!/usr/bin/env python3
"""
Generate daily practice folders for Python Kata-Machine
Equivalent to 'yarn generate' in the original kata-machine
"""

import os
import sys
from pathlib import Path
from typing import List, Dict
import shutil

# Add parent directory to path so we can import config_loader
sys.path.append(str(Path(__file__).parent.parent))
from config_loader import ConfigLoader


class KataGenerator:
    """Generates daily practice folders with algorithm stubs"""
    
    def __init__(self, base_dir: Path = None):
        self.base_dir = base_dir or Path.cwd()
        self.src_dir = self.base_dir / "src"
        self.templates_dir = self.base_dir / "templates"
        self.tests_dir = self.base_dir / "tests"
        self.config_loader = ConfigLoader()
        
    def find_next_day(self) -> int:
        """Find the next day number to generate"""
        if not self.src_dir.exists():
            return 1
            
        existing_days = []
        for item in self.src_dir.iterdir():
            if item.is_dir() and item.name.startswith("day"):
                try:
                    day_num = int(item.name[3:])  # Remove "day" prefix
                    existing_days.append(day_num)
                except ValueError:
                    continue
        
        return max(existing_days, default=0) + 1
    
    def create_directory_structure(self, day_num: int) -> Path:
        """Create the directory structure for a day"""
        day_dir = self.src_dir / f"day{day_num}"
        
        # Create directories
        day_dir.mkdir(parents=True, exist_ok=True)
        (day_dir / "__init__.py").touch()  # Make it a Python package
        
        return day_dir
    
    def generate_algorithm_stub(self, algorithm_name: str, day_dir: Path) -> None:
        """Generate a single algorithm stub file"""
        # Convert algorithm name to snake_case for filename
        filename = self._to_snake_case(algorithm_name) + ".py"
        file_path = day_dir / filename
        
        # Generate the stub content
        stub_content = self._create_algorithm_stub(algorithm_name)
        
        # Write the file
        with open(file_path, 'w') as f:
            f.write(stub_content)
        
        print(f"   📄 Created {filename}")
    
    def _to_snake_case(self, name: str) -> str:
        """Convert CamelCase to snake_case"""
        result = []
        for i, char in enumerate(name):
            if char.isupper() and i > 0:
                result.append('_')
            result.append(char.lower())
        return ''.join(result)
    
    def _create_algorithm_stub(self, algorithm_name: str) -> str:
        """Create the content for an algorithm stub file"""
        stub_template = f'''"""
{algorithm_name} Algorithm Implementation
Generated by Python Kata-Machine

TODO: Implement the {algorithm_name} algorithm
"""

from typing import List, Optional, Any


def {self._to_snake_case(algorithm_name)}(*args, **kwargs):
    """
    {algorithm_name} implementation
    
    TODO: 
    1. Define proper function signature based on algorithm requirements
    2. Add type hints for parameters and return value
    3. Write the algorithm implementation
    4. Add docstring with complexity analysis
    
    Args:
        *args: Replace with actual parameters
        **kwargs: Replace with actual parameters
    
    Returns:
        Replace with actual return type and description
        
    Time Complexity: O(?) - TODO: Analyze and document
    Space Complexity: O(?) - TODO: Analyze and document
    """
    # TODO: Implement {algorithm_name}
    raise NotImplementedError("TODO: Implement {algorithm_name}")


# Example usage and testing
if __name__ == "__main__":
    # TODO: Add example usage and basic testing
    print(f"Testing {algorithm_name}...")
    
    # Example test cases (replace with actual test cases)
    # result = {self._to_snake_case(algorithm_name)}(test_input)
    # print(f"Result: {{result}}")
    
    print("TODO: Implement test cases")
'''
        return stub_template
    
    def generate_day(self) -> int:
        """Generate a complete day of practice"""
        # Load configuration
        try:
            config = self.config_loader.load_config()
            algorithms = config["dsa"]
        except Exception as e:
            print(f"❌ Error loading configuration: {e}")
            return 1
        
        # Find next day number
        day_num = self.find_next_day()
        
        print(f"🚀 Generating Day {day_num} Practice Session...")
        print(f"   📚 {len(algorithms)} algorithms to implement")
        print()
        
        # Create directory structure
        day_dir = self.create_directory_structure(day_num)
        print(f"📁 Created directory: {day_dir}")
        
        # Generate algorithm stubs
        for algorithm in algorithms:
            self.generate_algorithm_stub(algorithm, day_dir)
        
        # Create __init__.py with imports
        self._create_day_init_file(day_dir, algorithms)
        
        print()
        print(f"✅ Day {day_num} generated successfully!")
        print(f"   📂 Location: {day_dir}")
        print(f"   🎯 Ready to implement {len(algorithms)} algorithms")
        print()
        print("Next steps:")
        print(f"   1. cd {day_dir}")
        print("   2. Start implementing algorithms")
        print("   3. Run 'pytest' to test your implementations")
        
        return 0
    
    def _create_day_init_file(self, day_dir: Path, algorithms: List[str]) -> None:
        """Create __init__.py file with imports for the day"""
        init_content = f'''"""
Day {day_dir.name[3:]} - Python Kata Practice
Generated by Python Kata-Machine

Algorithms to implement:
{chr(10).join(f"- {algo}" for algo in algorithms)}
"""

# Import all algorithms for easy access
'''
        
        for algorithm in algorithms:
            module_name = self._to_snake_case(algorithm)
            function_name = self._to_snake_case(algorithm)
            init_content += f"from .{module_name} import {function_name}\n"
        
        init_content += f'''
# Export all algorithms
__all__ = [
{chr(10).join(f'    "{self._to_snake_case(algo)}",' for algo in algorithms)}
]
'''
        
        init_file = day_dir / "__init__.py"
        with open(init_file, 'w') as f:
            f.write(init_content)
        
        print("   📄 Created __init__.py")


def main():
    """Main function"""
    print("🔧 Python Kata-Machine Generator")
    print("=" * 40)
    
    generator = KataGenerator()
    return generator.generate_day()


if __name__ == "__main__":
    sys.exit(main())
